/*
 * Selling Partner API for Shipping
 * Provides programmatic access to Amazon Shipping APIs.   **Note:** If you are new to the Amazon Shipping API, refer to the latest version of <a href=\"https://developer-docs.amazon.com/amazon-shipping/docs/shipping-api-v2-reference\">Amazon Shipping API (v2)</a> on the <a href=\"https://developer-docs.amazon.com/amazon-shipping/\">Amazon Shipping Developer Documentation</a> site.
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.blueo.pis.amazonsdk.client.api;

import com.blueo.pis.amazonsdk.client.ApiException;
import com.blueo.pis.amazonsdk.model.shipping.CancelShipmentResponse;
import com.blueo.pis.amazonsdk.model.shipping.CreateShipmentRequest;
import com.blueo.pis.amazonsdk.model.shipping.CreateShipmentResponse;
import com.blueo.pis.amazonsdk.model.shipping.GetAccountResponse;
import com.blueo.pis.amazonsdk.model.shipping.GetRatesRequest;
import com.blueo.pis.amazonsdk.model.shipping.GetRatesResponse;
import com.blueo.pis.amazonsdk.model.shipping.GetShipmentResponse;
import com.blueo.pis.amazonsdk.model.shipping.GetTrackingInformationResponse;
import com.blueo.pis.amazonsdk.model.shipping.PurchaseLabelsRequest;
import com.blueo.pis.amazonsdk.model.shipping.PurchaseLabelsResponse;
import com.blueo.pis.amazonsdk.model.shipping.PurchaseShipmentRequest;
import com.blueo.pis.amazonsdk.model.shipping.PurchaseShipmentResponse;
import com.blueo.pis.amazonsdk.model.shipping.RetrieveShippingLabelRequest;
import com.blueo.pis.amazonsdk.model.shipping.RetrieveShippingLabelResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ShippingApi
 */
@Ignore
public class ShippingApiTest {

    private final ShippingApi api = new ShippingApi();

    
    /**
     * 
     *
     * Cancel a shipment by the given shipmentId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelShipmentTest() throws ApiException {
        String shipmentId = null;
        CancelShipmentResponse response = api.cancelShipment(shipmentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShipmentTest() throws ApiException {
        CreateShipmentRequest body = null;
        CreateShipmentResponse response = api.createShipment(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Verify if the current account is valid.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        GetAccountResponse response = api.getAccount();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get service rates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRatesTest() throws ApiException {
        GetRatesRequest body = null;
        GetRatesResponse response = api.getRates(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return the entire shipment object for the shipmentId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getShipmentTest() throws ApiException {
        String shipmentId = null;
        GetShipmentResponse response = api.getShipment(shipmentId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return the tracking information of a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrackingInformationTest() throws ApiException {
        String trackingId = null;
        GetTrackingInformationResponse response = api.getTrackingInformation(trackingId);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Purchase shipping labels based on a given rate.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchaseLabelsTest() throws ApiException {
        String shipmentId = null;
        PurchaseLabelsRequest body = null;
        PurchaseLabelsResponse response = api.purchaseLabels(shipmentId, body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Purchase shipping labels.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchaseShipmentTest() throws ApiException {
        PurchaseShipmentRequest body = null;
        PurchaseShipmentResponse response = api.purchaseShipment(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve shipping label based on the shipment id and tracking id.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \&quot;Usage Plans and Rate Limits\&quot; in the Selling Partner API documentation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveShippingLabelTest() throws ApiException {
        String shipmentId = null;
        String trackingId = null;
        RetrieveShippingLabelRequest body = null;
        RetrieveShippingLabelResponse response = api.retrieveShippingLabel(shipmentId, trackingId, body);

        // TODO: test validations
    }
    
}
